
//import com.sun.istack.internal.logging.Logger;
import java.sql.*;
import java.util.logging.Level;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
import java.awt.event.*;
import java.awt.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.text.*;


public class sita_cute_invoice extends javax.swing.JFrame {
Connection conn=null;
ResultSet rs = null;
PreparedStatement   pst = null;

    /** Creates new form sita_cute_invoice */
    public sita_cute_invoice() {
        initComponents();
        conn=javaconnect.ConnecrDb(); // CONNECTION TO SQLITE //
        Update_table();
       // Fillcombo(); // to call the combo function
        CurrentDate();
    }
    //SETS DATE //
    public void CurrentDate(){
 
    
    Thread clock = new Thread(){
    public void run(){
        for(;;){
          // System.err.println("p");
                   Calendar cal = new GregorianCalendar();
    int month = cal.get(Calendar.MONTH);
    int year = cal.get(Calendar.YEAR);
    int day = cal.get(Calendar.DAY_OF_MONTH);
    txt_date.setText("Date "+day+"-"+(month+1)+"-"+year);
    
    // SETS TIME //
    int second = cal.get(Calendar.SECOND);
    int minute = cal.get(Calendar.MINUTE);
    int hour = cal.get(Calendar.HOUR);
    txt_time.setText("Time "+hour+":"+(minute));
                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        java.util.logging.Logger.getLogger(sita_cute_invoice.class.getName()).log(Level.SEVERE, null, ex);
                    }
           
           }
        }
    };
    
    
    clock.start();
    }
    // TO CLEAR ALL FIELDS //
    public void clear(){ 
               txt_indx.setText("");
               txt_billing.setText("");
               txt_station.setText("");
               txt_invoice.setText("");
               txt_activity_month.setText("");
               txt_usage_month.setText("");
               txt_pax_claimed.setText("");
               txt_pax_reported.setText("");
    }
    
    
    public void close(){  //close JFrame window fuction //
        WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }
    
    //TO UPDATE TABLE AFTER MODIFICATION //
    
private void Update_table(){
  
    try{
String sql = "select * from airindia_sqlite";
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    Table_airindia.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
            
                       
        }
     finally{ //to solve database locked problem
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    }
    }
    
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table_airindia = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        txt_activity_month = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_usage_month = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_pax_claimed = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txt_search = new javax.swing.JTextField();
        txt_billing = new javax.swing.JTextField();
        txt_pax_reported = new javax.swing.JTextField();
        txt_station = new javax.swing.JTextField();
        txt_invoice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_indx = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        cmd_save = new javax.swing.JButton();
        cmd_update = new javax.swing.JButton();
        cmd_clear = new javax.swing.JButton();
        cmd_delete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_billing2 = new javax.swing.JTextField();
        txt_station2 = new javax.swing.JTextField();
        txt_invoice2 = new javax.swing.JTextField();
        cmd_print = new javax.swing.JButton();
        txt_amonth2 = new javax.swing.JTextField();
        txt_umonth2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cmd_search = new javax.swing.JButton();
        txt_new = new javax.swing.JButton();
        cmd_exit = new javax.swing.JButton();
        cmd_clear2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        txt_date = new javax.swing.JMenu();
        txt_time = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AirIndia DataBase Software");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Table_airindia.setAutoCreateRowSorter(true);
        Table_airindia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table_airindia.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        Table_airindia.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Table_airindia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_airindiaMouseClicked(evt);
            }
        });
        Table_airindia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_airindiaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table_airindiaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table_airindia);

        jLabel6.setText("PAX CLAIMED");

        jLabel3.setText("INVOICE");

        jLabel7.setText("PAX REPORTED");

        jLabel4.setText("ACTIVITY MONTH");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        txt_search.setToolTipText("search anything from database (Case Sensitive)");
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_searchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_search, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txt_station.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_stationActionPerformed(evt);
            }
        });

        jLabel2.setText("STATION");

        jLabel5.setText("USAGE MONTH");

        jLabel1.setText("BILLING");

        txt_indx.setBackground(new java.awt.Color(-4144960,true));
        txt_indx.setEditable(false);
        txt_indx.setFocusable(false);
        txt_indx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_indxActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        cmd_save.setText("Save");
        cmd_save.setToolTipText("save new record into database");
        cmd_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_saveActionPerformed(evt);
            }
        });
        cmd_save.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_saveKeyPressed(evt);
            }
        });

        cmd_update.setText("Update");
        cmd_update.setToolTipText("update existing record into database");
        cmd_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_updateActionPerformed(evt);
            }
        });
        cmd_update.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_updateKeyPressed(evt);
            }
        });

        cmd_clear.setText("Clear");
        cmd_clear.setToolTipText("clear all fields");
        cmd_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_clearActionPerformed(evt);
            }
        });
        cmd_clear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_clearKeyPressed(evt);
            }
        });

        cmd_delete.setText("Delete");
        cmd_delete.setToolTipText("delete record from database");
        cmd_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_deleteActionPerformed(evt);
            }
        });
        cmd_delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_deleteKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(cmd_delete)
                .addGap(62, 62, 62))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(cmd_save)
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(cmd_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(cmd_update)
                .addGap(18, 18, 18))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(cmd_save, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_clear)
                    .addComponent(cmd_update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmd_delete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(24, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_pax_reported, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(txt_pax_claimed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(txt_usage_month, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_activity_month, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_invoice, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_station, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_billing, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(txt_indx, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(98, 98, 98))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(txt_indx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_billing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_station, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_activity_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_usage_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_pax_claimed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_pax_reported, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
        );

        jTabbedPane1.addTab("Operations", jPanel3);

        jLabel8.setText("BILLING");

        jLabel9.setText("STATION");

        jLabel10.setText("INVOICE");

        txt_billing2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_billing2ActionPerformed(evt);
            }
        });

        txt_station2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_station2ActionPerformed(evt);
            }
        });

        cmd_print.setText("Print");
        cmd_print.setToolTipText("print table");
        cmd_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_printActionPerformed(evt);
            }
        });

        txt_amonth2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_amonth2ActionPerformed(evt);
            }
        });

        jLabel11.setText("ACTIVITY MONTH");

        jLabel12.setText("USAGE MONTH");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        cmd_search.setText("Search");
        cmd_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_searchActionPerformed(evt);
            }
        });
        cmd_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_searchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmd_search, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd_search, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmd_print)
                .addContainerGap(228, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_umonth2, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_amonth2, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_invoice2, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(txt_station2, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(txt_billing2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))))
                .addGap(123, 123, 123))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmd_print)
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txt_billing2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txt_station2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(txt_invoice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txt_amonth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(txt_umonth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Advanced Search", jPanel4);

        txt_new.setText("About");
        txt_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_newActionPerformed(evt);
            }
        });

        cmd_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Actions-application-exit-icon.png"))); // NOI18N
        cmd_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exitActionPerformed(evt);
            }
        });

        cmd_clear2.setText("Refresh");
        cmd_clear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_clear2ActionPerformed(evt);
            }
        });
        cmd_clear2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmd_clear2KeyPressed(evt);
            }
        });

        jMenu1.setText("File");
        jMenu1.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Actions-application-exit-icon.png"))); // NOI18N
        jMenuItem2.setText("Close");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        txt_date.setText("Date ");
        txt_date.setFocusable(false);
        jMenuBar1.add(txt_date);

        txt_time.setText("Time");
        jMenuBar1.add(txt_time);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmd_exit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmd_clear2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_new)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_new, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmd_exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(353, Short.MAX_VALUE)
                .addComponent(cmd_clear2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(261, 261, 261))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1105)/2, (screenSize.height-707)/2, 1105, 707);
    }// </editor-fold>//GEN-END:initComponents

private void txt_stationActionPerformed(java.awt.event.ActionEvent evt) {

}//GEN-LAST:event_txt_stationActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
close();
    
}//GEN-LAST:event_jMenuItem2ActionPerformed
// TO SAVE A RECORD //// open JFrame from a Click  //
private void txt_newActionPerformed(java.awt.event.ActionEvent evt) {
user_info s = new user_info(); //making new object of JFrame
s.setVisible(true);
    
}//GEN-LAST:event_txt_newActionPerformed
// TO DELETE A RECORD BASED ON INDEX(PK)  //// TO EDIT A RECORD
private void Table_airindiaKeyPressed(java.awt.event.KeyEvent evt) {

}//GEN-LAST:event_Table_airindiaKeyPressed







// TO SELECT A RECORD BY CLICKING ON TABLE //
private void Table_airindiaMouseClicked(java.awt.event.MouseEvent evt) {

    try{
int row = Table_airindia.getSelectedRow();
String Table_click=(Table_airindia.getModel().getValueAt(row,0).toString());
String sql="Select * from airindia_sqlite where INDX = '"+Table_click+"' ";
pst=conn.prepareStatement(sql);
rs=pst.executeQuery();
if(rs.next()){
               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
    
    
}


        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }
    finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
    
}
//to show selected value in TextField when Key UP or DOWN//
private void Table_airindiaKeyReleased(java.awt.event.KeyEvent evt) {
if (evt.getKeyCode()==KeyEvent.VK_DOWN ||evt.getKeyCode()==KeyEvent.VK_UP )
{
    
   try{
int row=Table_airindia.getSelectedRow();
String Table_click=(Table_airindia.getModel().getValueAt(row,0).toString());
String sql="select * from airindia_sqlite where INDX='"+Table_click+"' ";
pst=conn.prepareStatement(sql);
rs=pst.executeQuery();
if(rs.next()){
               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
               String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
    
    
    
}


        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 } 
   
   
   finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
}
}
// TO GRAPH SEARCH //
private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {
try{
String sql="select * from airindia_sqlite where INDX=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
    
               
}

}catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }      
try{
String sql="select * from airindia_sqlite where BILLING=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
    
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
try{
String sql="select * from airindia_sqlite where STATION=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
    
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
try{
String sql="select * from airindia_sqlite where INVOICE=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }

try{
String sql="select * from airindia_sqlite where [ACTIVITY MONTH]=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
try{
String sql="select * from airindia_sqlite where [USAGE MONTH]=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
try{
String sql="select * from airindia_sqlite where [PAX CLAIMED]=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }
try{
String sql="select * from airindia_sqlite where [PAX REPORTED BY AAI]=?";
pst=conn.prepareStatement(sql);
pst.setString(1,txt_search.getText());

rs=pst.executeQuery();
if(rs.next()){

               String add1 = rs.getString("INDX");
               txt_indx.setText(add1);
               String add2 = rs.getString("BILLING");
               txt_billing.setText(add2);
               String add3 = rs.getString("STATION");
               txt_station.setText(add3);
                String add4 = rs.getString("INVOICE");
               txt_invoice.setText(add4);
               String add5 = rs.getString("ACTIVITY MONTH");
               txt_activity_month.setText(add5);
               String add6 = rs.getString("USAGE MONTH");
               txt_usage_month.setText(add6);
               String add7 = rs.getString("PAX CLAIMED");
               txt_pax_claimed.setText(add7);
               String add8 = rs.getString("PAX REPORTED BY AAI");
               txt_pax_reported.setText(add8);
}
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }

finally{ //to solve database locked problem, write it after each QUERY 
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    } }

}//GEN-LAST:event_txt_searchKeyReleased
// TO EXIT ALL WINDOWS //// TO PRINT THE TABLE //
private void cmd_printActionPerformed(java.awt.event.ActionEvent evt) {

    MessageFormat header= new MessageFormat("Report Print");
MessageFormat footer= new MessageFormat("Page{0,number,integer}");
    
    try{
Table_airindia.print(JTable.PrintMode.NORMAL,header,footer);
        }
        catch (java.awt.print.PrinterException e) {
            System.err.format("Cannot print %s%n",e.getMessage());
            
                          
    		 }
}
// TO CLEAR FIELDS WHEN PRESS BACKSPACE IN SEARCH //
private void txt_searchKeyPressed(java.awt.event.KeyEvent evt) {
clear();
}

private void txt_billing2ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}

private void txt_station2ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}
// TO ADVANCED SEARCH //
private void cmd_searchActionPerformed(java.awt.event.ActionEvent evt) {

    String val1=txt_billing2.getText();
    String val2=txt_station2.getText();
    String val3=txt_invoice2.getText();
    String val4=txt_amonth2.getText();
    String val5=txt_umonth2.getText();
    
    
    
    try{
        StringBuilder sb = new StringBuilder("select * from airindia_sqlite");
        boolean first = true;  
        
        
if (!txt_billing2.getText().equals("")) {  
                sb.append(" where BILLING = '").append(val1).append("' ");  
   first = false;  
}  

if (!txt_station2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where STATION = '").append(val2).append("' ");  
       first = false;  
   }  
   else         sb.append(" and STATION = '").append(val2).append("' ");  
}

if (!txt_invoice2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where INVOICE = '").append(val3).append("' ");  
       first = false;  
   }  
   else         sb.append(" and INVOICE = '").append(val3).append("' ");  
}
if (!txt_amonth2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where [ACTIVITY MONTH] = '").append(val4).append("' ");  
       first = false;  
   }  
   else         sb.append(" and [ACTIVITY MONTH] = '").append(val4).append("' ");  
}

if (!txt_umonth2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where [USAGE MONTH] = '").append(val5).append("' ");  
       first = false;  
   }  
   else         sb.append(" and [USAGE MONTH] = '").append(val5).append("' ");  
}



        sb.append(";"); 
        final String sql = sb.toString();
        pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    Table_airindia.setModel(DbUtils.resultSetToTableModel(rs));
        
    
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
            
                       
        }
     finally{ //to solve database locked problem
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    }
    }
    
}//GEN-LAST:event_cmd_searchActionPerformed

private void cmd_clear2ActionPerformed(java.awt.event.ActionEvent evt) {
Update_table();
}//GEN-LAST:event_cmd_clear2ActionPerformed

private void txt_indxActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}//GEN-LAST:event_txt_indxActionPerformed

private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}//GEN-LAST:event_txt_searchActionPerformed

private void txt_amonth2ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}//GEN-LAST:event_txt_amonth2ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
               txt_billing2.setText("");
               txt_station2.setText("");
               txt_amonth2.setText("");
               txt_umonth2.setText("");
               txt_invoice2.setText("");

}

private void cmd_saveActionPerformed(java.awt.event.ActionEvent evt) {
try{
    String sql="Insert into airindia_sqlite ('BILLING','STATION','INVOICE','ACTIVITY MONTH','USAGE MONTH','PAX CLAIMED','PAX REPORTED BY AAI') values (?,?,?,?,?,?,?)";
pst=conn.prepareStatement(sql);  //codes to save the data into DataBase from textfields
pst.setString(1, txt_billing.getText());
pst.setString(2, txt_station.getText());
pst.setString(3, txt_invoice.getText());
pst.setString(4, txt_activity_month.getText());
pst.setString(5, txt_usage_month.getText());
pst.setString(6, txt_pax_claimed.getText());
pst.setString(7, txt_pax_reported.getText());
String val1=txt_billing.getText();
String val2=txt_station.getText();
    

        if( !"".equals(val1) && !"".equals(val2)){
pst.execute();
String msg = "<html>BILLING=     "+txt_billing.getText()+"<br>"
+"STATION=        "+txt_station.getText()+"<br>"
+"INVOICE=        "+txt_invoice.getText()+"<br>"
+"ACTIVITY MONTH= "+txt_activity_month.getText()+"<br>"
+"USAGE MONTH=    "+txt_usage_month.getText()+"<br>"
+"PAX CLAIMED=    "+txt_pax_claimed.getText()+"<br>"
+"PAX REPORTED=   "+txt_pax_reported.getText()+"</html>";

//int p = JOptionPane.showConfirmDialog(null,"Do you really want to delete","Delete",JOptionPane.YES_NO_OPTION);

JOptionPane optionpane=new JOptionPane();
optionpane.setMessage(msg);
optionpane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
JDialog dialog=optionpane.createDialog(null,"Below values have been saved:-");     
    dialog.setVisible(true);  
        //JOptionPane.showMessageDialog(null, "Saved");
        }
        else{
            JOptionPane.showMessageDialog(null, "can't save, Please enter Values!");
        }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
                               
       		 }
    
    Update_table();  // to refresh values after saving in table  //
    txt_pax_claimed.setText("");
    txt_pax_reported.setText("");
    
}
//DELETE ROW FROM DB
private void cmd_deleteActionPerformed(java.awt.event.ActionEvent evt) {

String val1=txt_billing.getText();
String val2=txt_station.getText();
    

        if("".equals(val1) && "".equals(val2)){
JOptionPane.showMessageDialog(null, "can't delete, Fields are empty!");
        }    

        else{
int p = JOptionPane.showConfirmDialog(null,"Do you really want to delete","Delete",JOptionPane.YES_NO_OPTION);
if(p==0){    
    String sql="delete from airindia_sqlite where INDX = ?";
    
    try{
pst=conn.prepareStatement(sql);
pst.setString(1, txt_indx.getText());

pst.execute();
//JOptionPane.showMessageDialog(null,"Deleted");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                       
       		 }
    Update_table();  // to refresh values after saving in table
    txt_indx.setText("");
               txt_billing.setText("");
               txt_station.setText("");
               txt_invoice.setText("");
               txt_activity_month.setText("");
               txt_usage_month.setText("");
               txt_pax_claimed.setText("");
               txt_pax_reported.setText("");
}
        }
}
//UPDATE ROW IN DB
private void cmd_updateActionPerformed(java.awt.event.ActionEvent evt) {
try{
String value1= txt_indx.getText();
String value2= txt_billing.getText();
String value3= txt_station.getText();
String value4= txt_invoice.getText();
String value5= txt_activity_month.getText();
String value6= txt_usage_month.getText();
String value7= txt_pax_claimed.getText();
String value8= txt_pax_reported.getText();

String sql = "update airindia_sqlite set 'INDX' = '"+value1+"','BILLING' = '"+value2+"', 'STATION' = '"+value3+"', 'INVOICE' = '"+value4+"', 'ACTIVITY MONTH' = '"+value5+"', 'USAGE MONTH' = '"+value6+"', 'PAX CLAIMED' = '"+value7+"', 'PAX REPORTED BY AAI' = '"+value8+"' where INDX = '"+value1+"'";
pst= conn.prepareStatement(sql);

        if( !"".equals(value2) && !"".equals(value3)){
pst.execute();
JOptionPane.showMessageDialog(null, "Table Edited");
        }
        else{
            JOptionPane.showMessageDialog(null, "can't edit, Please select from Table!");
        }

        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }
    
    Update_table();  // to refresh values after saving in table  //
}

private void cmd_clearActionPerformed(java.awt.event.ActionEvent evt) {

               txt_indx.setText("");
               txt_billing.setText("");
               txt_station.setText("");
               txt_invoice.setText("");
               txt_activity_month.setText("");
               txt_usage_month.setText("");
               txt_pax_claimed.setText("");
               txt_pax_reported.setText("");
}

private void cmd_exitActionPerformed(java.awt.event.ActionEvent evt) {
close();
}

private void cmd_saveKeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    try{
    String sql="Insert into airindia_sqlite ('BILLING','STATION','INVOICE','ACTIVITY MONTH','USAGE MONTH','PAX CLAIMED','PAX REPORTED BY AAI') values (?,?,?,?,?,?,?)";
pst=conn.prepareStatement(sql);  //codes to save the data into DataBase from textfields
pst.setString(1, txt_billing.getText());
pst.setString(2, txt_station.getText());
pst.setString(3, txt_invoice.getText());
pst.setString(4, txt_activity_month.getText());
pst.setString(5, txt_usage_month.getText());
pst.setString(6, txt_pax_claimed.getText());
pst.setString(7, txt_pax_reported.getText());
String val1=txt_billing.getText();
String val2=txt_station.getText();
    

        if( !"".equals(val1) && !"".equals(val2)){
pst.execute();
String msg = "<html>BILLING=     "+txt_billing.getText()+"<br>"
+"STATION=        "+txt_station.getText()+"<br>"
+"INVOICE=        "+txt_invoice.getText()+"<br>"
+"ACTIVITY MONTH= "+txt_activity_month.getText()+"<br>"
+"USAGE MONTH=    "+txt_usage_month.getText()+"<br>"
+"PAX CLAIMED=    "+txt_pax_claimed.getText()+"<br>"
+"PAX REPORTED=   "+txt_pax_reported.getText()+"</html>";

//int p = JOptionPane.showConfirmDialog(null,"Do you really want to delete","Delete",JOptionPane.YES_NO_OPTION);

JOptionPane optionpane=new JOptionPane();
optionpane.setMessage(msg);
optionpane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
JDialog dialog=optionpane.createDialog(null,"Below values have been saved:-");     
    dialog.setVisible(true);  
        //JOptionPane.showMessageDialog(null, "Saved");
        }
        else{
            JOptionPane.showMessageDialog(null, "can't save, Please enter Values!");
        }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
                               
       		 }
    
    Update_table();  // to refresh values after saving in table  //

}
}

private void cmd_clearKeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    
               txt_indx.setText("");
               txt_billing.setText("");
               txt_station.setText("");
               txt_invoice.setText("");
               txt_activity_month.setText("");
               txt_usage_month.setText("");
               txt_pax_claimed.setText("");
               txt_pax_reported.setText("");
}
}

private void cmd_updateKeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    try{
String value1= txt_indx.getText();
String value2= txt_billing.getText();
String value3= txt_station.getText();
String value4= txt_invoice.getText();
String value5= txt_activity_month.getText();
String value6= txt_usage_month.getText();
String value7= txt_pax_claimed.getText();
String value8= txt_pax_reported.getText();

String sql = "update airindia_sqlite set 'INDX' = '"+value1+"','BILLING' = '"+value2+"', 'STATION' = '"+value3+"', 'INVOICE' = '"+value4+"', 'ACTIVITY MONTH' = '"+value5+"', 'USAGE MONTH' = '"+value6+"', 'PAX CLAIMED' = '"+value7+"', 'PAX REPORTED BY AAI' = '"+value8+"' where INDX = '"+value1+"'";
pst= conn.prepareStatement(sql);

        if( !"".equals(value2) && !"".equals(value3)){
pst.execute();
JOptionPane.showMessageDialog(null, "Table Edited");
        }
        else{
            JOptionPane.showMessageDialog(null, "can't edit, Please select from Table!");
        }

        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                          
    		 }
    
    Update_table();  // to refresh values after saving in table  //
}
}//GEN-LAST:event_cmd_updateKeyPressed

private void cmd_deleteKeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    
String val1=txt_billing.getText();
String val2=txt_station.getText();
    

        if("".equals(val1) && "".equals(val2)){
JOptionPane.showMessageDialog(null, "can't delete, Fields are empty!");
        }    

        else{
int p = JOptionPane.showConfirmDialog(null,"Do you really want to delete","Delete",JOptionPane.YES_NO_OPTION);
if(p==0){    
    String sql="delete from airindia_sqlite where INDX = ?";
    
    try{
pst=conn.prepareStatement(sql);
pst.setString(1, txt_indx.getText());

pst.execute();
//JOptionPane.showMessageDialog(null,"Deleted");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            
                       
       		 }
    Update_table();  // to refresh values after saving in table
}
        }
}
}//GEN-LAST:event_cmd_deleteKeyPressed

private void cmd_searchKeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    
    String val1=txt_billing2.getText();
    String val2=txt_station2.getText();
    String val3=txt_invoice2.getText();
    String val4=txt_amonth2.getText();
    String val5=txt_umonth2.getText();
    
    
    
    try{
        StringBuilder sb = new StringBuilder("select * from airindia_sqlite");
        boolean first = true;  
        
        
if (!txt_billing2.getText().equals("")) {  
                sb.append(" where BILLING = '").append(val1).append("' ");  
   first = false;  
}  

if (!txt_station2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where STATION = '").append(val2).append("' ");  
       first = false;  
   }  
   else         sb.append(" and STATION = '").append(val2).append("' ");  
}

if (!txt_invoice2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where INVOICE = '").append(val3).append("' ");  
       first = false;  
   }  
   else         sb.append(" and INVOICE = '").append(val3).append("' ");  
}
if (!txt_amonth2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where [ACTIVITY MONTH] = '").append(val4).append("' ");  
       first = false;  
   }  
   else         sb.append(" and [ACTIVITY MONTH] = '").append(val4).append("' ");  
}

if (!txt_umonth2.getText().equals("")) {  
   if (first) {  
                    sb.append(" where [USAGE MONTH] = '").append(val5).append("' ");  
       first = false;  
   }  
   else         sb.append(" and [USAGE MONTH] = '").append(val5).append("' ");  
}



        sb.append(";"); 
        final String sql = sb.toString();
        pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    Table_airindia.setModel(DbUtils.resultSetToTableModel(rs));
        
    
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
            
                       
        }
     finally{ //to solve database locked problem
        try{
            rs.close();
            pst.close();
        }
    catch(Exception e){
    
    }
    }
}
}

private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
       txt_billing2.setText("");
               txt_station2.setText("");
               txt_amonth2.setText("");
               txt_umonth2.setText("");
               txt_invoice2.setText("");
}
}

private void cmd_clear2KeyPressed(java.awt.event.KeyEvent evt) {
if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    Update_table();
}
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sita_cute_invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sita_cute_invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sita_cute_invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sita_cute_invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new sita_cute_invoice().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_airindia;
    private javax.swing.JButton cmd_clear;
    private javax.swing.JButton cmd_clear2;
    private javax.swing.JButton cmd_delete;
    private javax.swing.JButton cmd_exit;
    private javax.swing.JButton cmd_print;
    private javax.swing.JButton cmd_save;
    private javax.swing.JButton cmd_search;
    private javax.swing.JButton cmd_update;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txt_activity_month;
    private javax.swing.JTextField txt_amonth2;
    private javax.swing.JTextField txt_billing;
    private javax.swing.JTextField txt_billing2;
    private javax.swing.JMenu txt_date;
    private javax.swing.JTextField txt_indx;
    private javax.swing.JTextField txt_invoice;
    private javax.swing.JTextField txt_invoice2;
    private javax.swing.JButton txt_new;
    private javax.swing.JTextField txt_pax_claimed;
    private javax.swing.JTextField txt_pax_reported;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_station;
    private javax.swing.JTextField txt_station2;
    private javax.swing.JMenu txt_time;
    private javax.swing.JTextField txt_umonth2;
    private javax.swing.JTextField txt_usage_month;
    // End of variables declaration//GEN-END:variables
}
